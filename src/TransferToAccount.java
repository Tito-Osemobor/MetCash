/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import javax.swing.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 *
 * @author jessicamorcos
 */
public class TransferToAccount extends javax.swing.JFrame {
    private Integer money;
    private String accNum;
    private User user;
    private List<User> users;


    /**
     * Creates new form TransferToAccount1
     */
    public TransferToAccount(User user, List<User> users) {
        this.user = user;
        this.users = users;

         initComponents();
        currentBalance.setText("$"+user.getCheckingsBalance());
       
    }
    public TransferToAccount(List<User> users) {

        this.users = users;

    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        TransfarFundAccountTitlePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        TransferFromPanel = new javax.swing.JPanel();
        fromAccount = new javax.swing.JComboBox<>();
        TransferFromText2 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        TransferFundsButton = new javax.swing.JButton();
        AmountToTransferText = new javax.swing.JLabel();
        amountTransfer = new javax.swing.JTextField();
        TransferFromPanel1 = new javax.swing.JPanel();
        TransferFromText1 = new javax.swing.JLabel();
        toTransfer = new javax.swing.JTextField();
        TransferFromText = new javax.swing.JLabel();
        TransferToLabel = new javax.swing.JLabel();
        BalancePanel = new javax.swing.JPanel();
        currentBalanceTitle = new javax.swing.JLabel();
        currentBalancePanel = new javax.swing.JPanel();
        currentBalance = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MetCash");
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setText("TRANSFER FUND: TO ACCOUNT");
        jLabel1.setToolTipText("");

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/titoosemobor/TMU-ComputerSci/JAVA/ATMProject/assets/rsz_4rsz_1rsz_metcash-high-resolution-logo-black-on-transparent-background.png")); // NOI18N

        javax.swing.GroupLayout TransfarFundAccountTitlePanelLayout = new javax.swing.GroupLayout(TransfarFundAccountTitlePanel);
        TransfarFundAccountTitlePanel.setLayout(TransfarFundAccountTitlePanelLayout);
        TransfarFundAccountTitlePanelLayout.setHorizontalGroup(
            TransfarFundAccountTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TransfarFundAccountTitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(167, 167, 167))
        );
        TransfarFundAccountTitlePanelLayout.setVerticalGroup(
            TransfarFundAccountTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransfarFundAccountTitlePanelLayout.createSequentialGroup()
                .addGroup(TransfarFundAccountTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TransfarFundAccountTitlePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, TransfarFundAccountTitlePanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        TransferFromPanel.setBackground(new java.awt.Color(230, 230, 230));
        TransferFromPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(242, 242, 242)));

        fromAccount.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        fromAccount.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Checkings Account", "Savings Account" }));
        fromAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromAccountActionPerformed(evt);
            }
        });

        TransferFromText2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        TransferFromText2.setText("Pick Account");

        javax.swing.GroupLayout TransferFromPanelLayout = new javax.swing.GroupLayout(TransferFromPanel);
        TransferFromPanel.setLayout(TransferFromPanelLayout);
        TransferFromPanelLayout.setHorizontalGroup(
            TransferFromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransferFromPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TransferFromText2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TransferFromPanelLayout.setVerticalGroup(
            TransferFromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransferFromPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TransferFromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TransferFromText2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        confirmButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        TransferFundsButton.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        TransferFundsButton.setText("<  Back ");
        TransferFundsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        TransferFundsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferFundsButtonActionPerformed(evt);
            }
        });

        AmountToTransferText.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        AmountToTransferText.setText("Amount to Transfer:");

        amountTransfer.setBackground(new java.awt.Color(242, 242, 242));

        TransferFromPanel1.setBackground(new java.awt.Color(230, 230, 230));
        TransferFromPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(242, 242, 242)));

        TransferFromText1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        TransferFromText1.setText("Account Num:");

        toTransfer.setBackground(new java.awt.Color(242, 242, 242));
        toTransfer.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        javax.swing.GroupLayout TransferFromPanel1Layout = new javax.swing.GroupLayout(TransferFromPanel1);
        TransferFromPanel1.setLayout(TransferFromPanel1Layout);
        TransferFromPanel1Layout.setHorizontalGroup(
            TransferFromPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransferFromPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TransferFromText1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(toTransfer, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );
        TransferFromPanel1Layout.setVerticalGroup(
            TransferFromPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransferFromPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TransferFromPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TransferFromText1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        TransferFromText.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        TransferFromText.setText("Transfer From:");

        TransferToLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        TransferToLabel.setText("Transfer To:");

        currentBalanceTitle.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        currentBalanceTitle.setText("Current Balance:");
        currentBalanceTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        currentBalancePanel.setBackground(new java.awt.Color(220, 220, 220));
        currentBalancePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        currentBalance.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        currentBalance.setForeground(new java.awt.Color(51, 51, 51));
        currentBalance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout currentBalancePanelLayout = new javax.swing.GroupLayout(currentBalancePanel);
        currentBalancePanel.setLayout(currentBalancePanelLayout);
        currentBalancePanelLayout.setHorizontalGroup(
            currentBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentBalancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );
        currentBalancePanelLayout.setVerticalGroup(
            currentBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentBalancePanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(currentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout BalancePanelLayout = new javax.swing.GroupLayout(BalancePanel);
        BalancePanel.setLayout(BalancePanelLayout);
        BalancePanelLayout.setHorizontalGroup(
            BalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BalancePanelLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(BalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BalancePanelLayout.createSequentialGroup()
                        .addComponent(currentBalanceTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BalancePanelLayout.createSequentialGroup()
                        .addComponent(currentBalancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        BalancePanelLayout.setVerticalGroup(
            BalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BalancePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentBalanceTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentBalancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addComponent(TransferFundsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(244, 244, 244))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(AmountToTransferText)
                                .addGap(161, 161, 161))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(amountTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TransferFromPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TransferToLabel))
                                .addGap(10, 10, 10))
                            .addComponent(TransferFromPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TransferFromText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addComponent(BalancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TransferFromPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(TransferFromText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)))
                        .addGap(18, 18, 18)
                        .addComponent(AmountToTransferText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amountTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TransferToLabel))
                    .addComponent(BalancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(TransferFromPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(TransferFundsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TransfarFundAccountTitlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(TransfarFundAccountTitlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        String selectedItem = (String) fromAccount.getSelectedItem();
        String[] balances= new String[3];
        assert selectedItem != null;
        boolean moneyCheck= false;
        String transferAmount = amountTransfer.getText();
        String toAccount = toTransfer.getText();
        if (transferAmount.isEmpty() || toAccount.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Missing Information");
        }
        else if (!transferAmount.matches("\\d+") || !toAccount.matches("\\d{5}")) {
            JOptionPane.showMessageDialog(this, "Invalid Input");
        }
        else {
            Boolean success = false;
            money = Integer.parseInt(transferAmount);
            accNum = toAccount;
            if(selectedItem.equals("Checkings Account")){
                if(isUserCheckCorrect( users, accNum)!=null){
                    User userB = isUserCheckCorrect( users, accNum);
                    balances=checkToAccCheck(user,userB,money);
                    if (balances[2].equals("Insufficient Funds")) {
                        JOptionPane.showMessageDialog(this, "Insufficient Funds");
                    }
                    else {
                        user.setCheckingsBalance(Integer.parseInt(balances[0]));
                        addToTransactionHistoryCheckings("$"+String.valueOf(money));
                        userB.setCheckingsBalance(Integer.parseInt(balances[1]));
                        currentBalance.setText("$" + user.getCheckingsBalance());
                        JOptionPane.showMessageDialog(this, "Transfer Successful");
                        success = true;
                    }
                }else if(isUserSavCorrect( users, accNum)!=null){
                    User userB = isUserSavCorrect( users, accNum);
                    balances=checkToAccSav(user,userB,money);
                    if (balances[2].equals("Insufficient Funds")) {
                        JOptionPane.showMessageDialog(this, "Insufficient Funds");
                    }
                    else {
                        user.setCheckingsBalance(Integer.parseInt(balances[0]));
                        addToTransactionHistoryCheckings("$"+String.valueOf(money));
                        userB.setSavingsBalance(Integer.parseInt(balances[1]));
                        currentBalance.setText("$" + user.getCheckingsBalance());
                        JOptionPane.showMessageDialog(this, "Transfer Successful");
                        success = true;
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Wrong Details");
                }

            }
            else {
                if(isUserCheckCorrect( users, accNum)!=null){
                    User userB = isUserCheckCorrect(users, accNum);
                    balances=savToAccCheck(user,userB,money);
                    if (balances[2].equals("Insufficient Funds")) {
                        JOptionPane.showMessageDialog(this, "Insufficient Funds");
                    }
                    else {
                        user.setSavingsBalance(Integer.parseInt(balances[0]));
                        addToTransactionHistorySavings("$"+String.valueOf(money));
                        userB.setCheckingsBalance(Integer.parseInt(balances[1]));
                        currentBalance.setText("$" + user.getSavingsBalance());
                        JOptionPane.showMessageDialog(this, "Transfer Successful");
                        success = true;
                    }
                }
                else if(isUserSavCorrect( users, accNum)!=null) {
                    User userB = isUserSavCorrect(users, accNum);
                    balances = savToAccSav(user, userB, money);
                    if (balances[2].equals("Insufficient Funds")) {
                        JOptionPane.showMessageDialog(this, "Insufficient Funds");
                    }
                    else {
                        user.setSavingsBalance(Integer.parseInt(balances[0]));
                        addToTransactionHistorySavings("$" + String.valueOf(money));
                        userB.setSavingsBalance(Integer.parseInt(balances[1]));
                        currentBalance.setText("$" + user.getSavingsBalance());
                        JOptionPane.showMessageDialog(this, "Transfer Successful");
                        success = true;
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Wrong Details");
                }
            }
        }



        // TODO add your handling code here:
    }//GEN-LAST:event_confirmButtonActionPerformed
    public void addToTransactionHistoryCheckings(String value){
        // Get the current date and time
        LocalDateTime now = LocalDateTime.now();

        // Format the date and time as a string
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDateTime = now.format(formatter);

        try {
            // Open the file in append mode
            FileWriter fw = new FileWriter(user.getTransactionPaper(), true);
            BufferedWriter bw = new BufferedWriter(fw);

            // Append some data to the file
            bw.write("Account Transfer/"+value+"/Checkings/"+formattedDateTime+"\n");

            // Close the writers
            bw.close();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void addToTransactionHistorySavings(String value){
        // Get the current date and time
        LocalDateTime now = LocalDateTime.now();

        // Format the date and time as a string
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDateTime = now.format(formatter);

        try {
            // Open the file in append mode
            FileWriter fw = new FileWriter(user.getTransactionPaper(), true);
            BufferedWriter bw = new BufferedWriter(fw);

            // Append some data to the file
            bw.write("Account Transfer/"+value+"/Savings/"+formattedDateTime+"\n");

            // Close the writers
            bw.close();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public User isUserCheckCorrect(List<User> users, String accNum) {
        for (User userB : users) {
            if (userB.getCheckingsAccountNumber().equals(accNum)) {
                return userB;
            }
        }
        return null;
    }
    public User isUserSavCorrect(List<User> users, String accNum) {
        for (User userB : users) {
            if (userB.getSavingsAccountNumber().equals(accNum)) {
                return userB;
            }
        }
        return null;
    }
    public String[] checkToAccCheck(User user,User userb, Integer money) {
        Integer currUserBalanceCheck = user.getCheckingsBalance();
        Integer userBBalanceCheck = userb.getCheckingsBalance();
        String[] balancesArr = {"","",""};
        if (currUserBalanceCheck - money >= 0 ) {
            currUserBalanceCheck -= money;
            userBBalanceCheck += money;
            balancesArr[0]=String.valueOf(currUserBalanceCheck);
            balancesArr[1]=String.valueOf(userBBalanceCheck);
        }else{
            balancesArr[2]="Insufficient Funds";
        }
            return balancesArr;

    }
    public String[] checkToAccSav(User user,User userb, Integer money) {
        Integer currUserBalanceCheck = user.getCheckingsBalance();
        Integer userBBalanceSav = userb.getSavingsBalance();
        String[] balancesArr = {"","",""};
        if (currUserBalanceCheck - money >= 0 ) {
            currUserBalanceCheck -= money;
            userBBalanceSav += money;
            balancesArr[0]=String.valueOf(currUserBalanceCheck);
            balancesArr[1]=String.valueOf(userBBalanceSav);
        }else{
            balancesArr[2]="Insufficient Funds";
        }

        return balancesArr;

    }
    public String[] savToAccCheck(User user,User userb, Integer money) {
        Integer currUserBalanceSav = user.getSavingsBalance();
        Integer userBBalanceCheck = userb.getCheckingsBalance();
        String[] balancesArr = {"","",""};
        if (currUserBalanceSav - money >= 0 ) {
            currUserBalanceSav -= money;
            userBBalanceCheck += money;
            balancesArr[0]=String.valueOf(currUserBalanceSav);
            balancesArr[1]=String.valueOf(userBBalanceCheck);
        }else{
            balancesArr[2]="Insufficient Funds";
        }

        return balancesArr;

    }
    public String[] savToAccSav(User user,User userb, Integer money) {
        Integer currUserBalanceSav = user.getSavingsBalance();
        Integer userBBalanceSav = userb.getSavingsBalance();
        String[] balancesArr = {"","",""};
        if (currUserBalanceSav - money >= 0 ) {
            currUserBalanceSav -= money;
            userBBalanceSav += money;
            balancesArr[0]=String.valueOf(currUserBalanceSav);
            balancesArr[1]=String.valueOf(userBBalanceSav);
        }else{
            balancesArr[2]="Insufficient Funds";
        }

        return balancesArr;

    }
    private void fromAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromAccountActionPerformed
        String selectedItem = (String) fromAccount.getSelectedItem();
        if (selectedItem.equals("Checkings Account")) {
            currentBalance.setText("$" + String.valueOf(user.getCheckingsBalance()));
        }
        else {
            currentBalance.setText("$" + String.valueOf(user.getSavingsBalance()));
        }
    }//GEN-LAST:event_fromAccountActionPerformed

    private void TransferFundsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferFundsButtonActionPerformed
        // TODO add your handling code here:
        TransactionMenu menuTransaction = new TransactionMenu(user,users);
        menuTransaction.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_TransferFundsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AmountToTransferText;
    private javax.swing.JPanel BalancePanel;
    private javax.swing.JPanel TransfarFundAccountTitlePanel;
    private javax.swing.JPanel TransferFromPanel;
    private javax.swing.JPanel TransferFromPanel1;
    private javax.swing.JLabel TransferFromText;
    private javax.swing.JLabel TransferFromText1;
    private javax.swing.JLabel TransferFromText2;
    private javax.swing.JButton TransferFundsButton;
    private javax.swing.JLabel TransferToLabel;
    private javax.swing.JTextField amountTransfer;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel currentBalance;
    private javax.swing.JPanel currentBalancePanel;
    private javax.swing.JLabel currentBalanceTitle;
    private javax.swing.JComboBox<String> fromAccount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField toTransfer;
    // End of variables declaration//GEN-END:variables
}
